{"ast":null,"code":"class Auth {\n  constructor() {\n    this.authenticated = false;\n    this.token = '';\n  }\n\n  setCookie(token) {\n    var d = new Date();\n    d.setTime(d.getTime() + 365 * 24 * 60 * 60 * 1000);\n    var expires = \"expires=\" + d.toUTCString();\n    document.cookie = \"gsaccess=\" + token + \";\" + expires + \";path=/\";\n    return true;\n  }\n\n  getCookie(cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  } //Check if User Is already logged in\n\n\n  checkStatus() {\n    let cookie = this.getCookie(\"gsaccess\");\n    fetch('https://api.goskilling.com/v1/check', {\n      method: 'POST',\n      headers: {\n        'Authorization': cookie\n      }\n    }).then(response => response.json()).then(data => {\n      if (data[\"code\"] == \"200\") {\n        console.log(data);\n        console.log(\"confirmed\");\n        this.token = cookie;\n        return this.authenticated = true;\n      } else {\n        console.log(data);\n        console.log(\"denied\");\n        return this.authenticated = false;\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    }); //cb();\n  } //Log in user\n\n\n  login(cb) {\n    let cookie = this.getCookie(\"gsaccess\");\n    this.authenticated = true;\n    this.token = cookie;\n    cb();\n  } //Log out user\n\n\n  logout(cb) {\n    this.authenticated = false;\n    cb();\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/christiankramp/Documents/GitHub/gs_tw/src/auth.js"],"names":["Auth","constructor","authenticated","token","setCookie","d","Date","setTime","getTime","expires","toUTCString","document","cookie","getCookie","cname","name","ca","split","i","length","c","charAt","substring","indexOf","checkStatus","fetch","method","headers","then","response","json","data","console","log","catch","error","login","cb","logout","isAuthenticated"],"mappings":"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","sourcesContent":["class Auth {\n\n\n    constructor() {\n      this.authenticated = false;\n      this.token = '';\n    }\n\n    setCookie(token) \n    {\n      var d = new Date();\n      d.setTime(d.getTime() + (365 * 24 * 60 * 60 * 1000));\n      var expires = \"expires=\"+d.toUTCString();\n      document.cookie = \"gsaccess=\" + token + \";\" + expires + \";path=/\";\n      return true;\n    }\n    \n    getCookie(cname) {\n      var name = cname + \"=\";\n      var ca = document.cookie.split(';');\n      for(var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0) == ' ') {\n          c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n          return c.substring(name.length, c.length);\n        }\n      }\n      return \"\";\n    }\n\n    //Check if User Is already logged in\n    checkStatus() {\n      let cookie = this.getCookie(\"gsaccess\");\n      fetch('https://api.goskilling.com/v1/check', {\n        method: 'POST',\n        headers: {\n          'Authorization': cookie\n        }})\n      .then(response => response.json())\n      .then(data=>{\n        if(data[\"code\"]==\"200\")\n        {\n            console.log(data);\n            console.log(\"confirmed\");\n            this.token = cookie;\n            return this.authenticated = true;            \n        }\n        else\n        {\n            console.log(data);\n            console.log(\"denied\");\n            return this.authenticated = false;\n        }\n\n      }).catch(error=>{\n          console.error('Error:',error);\n      })      \n      \n      //cb();\n    }\n    \n    //Log in user\n    login(cb) {\n      let cookie = this.getCookie(\"gsaccess\");\n      this.authenticated = true;\n      this.token = cookie;\n      cb();\n    }\n  \n    //Log out user\n    logout(cb) {\n      this.authenticated = false;\n      cb();\n    }\n  \n    isAuthenticated() {\n      return this.authenticated;\n    }\n}\n  \nexport default new Auth();\n  "]},"metadata":{},"sourceType":"module"}